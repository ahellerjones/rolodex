type LoginInfo struct { 
	user string `json:username`
	pass string `json:password`
	loginOrSignup bool `json:loginOrSignup`
}

- check if username and password exist 
  params: 
    - LoginInfo struct
  returns:  
    - pass back userId, nill error
    - nil userId, err if does not exist 
- check if username exists
  params: 
    - LoginInfo struct
  returns: 
  - pass back userId, nil error
  - nil username, err if does not exist

  
- create user integer with password,  
  params: 
    - LoginInfo struct
  returns: 
    - pass back userId, nil error 
    - nil userId pass back error if username already take
- delete user
  params: 
    - LoginInfo struct
  returns: 
    - err if user does not exist


type Identification struct {
	UserID int `json:"UserID"` // Refers to the user
	Key    int `json:"Key,omitempty"` // Is the primary key of the Contact
}

type Contact struct { 
	name string `json:name`
	address string `json:address`
	phoneNumber string `json:phoneNumber`
	email string `json:email`
	birthday string `json:birthday`
}
Since the userId is a field in the contact struct, then we dont pass the userId
- postContact
  params:
    - Contact struct
  all of the fields are optional except key (going to want to check to make sure theyre not nil?)
  returns: 
  - pass back contact, nil err

- getContacts
    # Get all contacts 
    params: 
    - userId -- int for the user
    returns:
    returns an array with the contact structs, err if problems, 

- updateContact 
  params: 
    - ContactInfo struct, # Note contact info may have nil fields if not updated
    - userId -- int for the user
  returns:
    err 
  
-deleteContact
  params: 
    - Contact struct 
  returns: 
    err


