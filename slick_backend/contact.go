package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

// Contact struct contains userID to associate each contact entry with a particular user.
// UserId should probably just be a string TODO:
// I think key should probably be removed too.
type Contact struct {
	KeyID       Identification `json:"KeyID"` // Need the Key atleast
	Name        string         `json:"Name"`  // Need this!
	Address     string         `json:"Address,omitempty"`
	PhoneNumber string         `json:"PhoneNumber,omitempty"`
	Email       string         `json:"Email,omitempty"`
	Birthday    string         `json:"Birthday,omitempty"`
}

type Identification struct {
	UserID int `json:"UserID"` // Also need this!
	Key    int `json:"Key,omitempty"`
}

// Used to marshal contacts for the GET request
type ContactGetResponse struct {
	Data []Contact `json:"Data,omitempty"`
}

// endpoint /contacts -- for reading a writing contact data.
// POST -- user is storing a conact
// GET -- gets all contacts
// UPDATE -- updates one contact with id
// DELETE -- deletes one contact
func (h *Handler) ContactsHandler(w http.ResponseWriter, r *http.Request) {
	switch r.Method {
	// POST
	case http.MethodPost:
		body, err := ioutil.ReadAll(r.Body)
		if err != nil {
			http.Error(w, "Failed to read request body", http.StatusInternalServerError)
			return
		}
		defer r.Body.Close()
		var contact Contact
		err = json.Unmarshal(body, &contact)
		// This should catch all shitty unmarshalling
		if err != nil {
			http.Error(w, err.Error(), 410)
			return
		}
		key, err := h.Database.InsertContact(contact) // This gets a key for the given contact struct
		if err != nil {
			http.Error(w, err.Error(), 410)
			return
		}
		w.WriteHeader(http.StatusOK) // 200
		contactsKey := Identification{
			UserID: contact.KeyID.UserID,
			Key:    key, // New key generated by the database
		}
		jsonData, err := json.Marshal(contactsKey)
		if err != nil {
			http.Error(w, "Failed to marshal JSON during creating a contact", http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		w.Write(jsonData)

	// GET
	case http.MethodGet:
		body, err := ioutil.ReadAll(r.Body)
		if err != nil {
			http.Error(w, "Failed to read request body from GET", http.StatusInternalServerError)
			return
		}
		defer r.Body.Close()
		var id Identification
		err = json.Unmarshal(body, &id)
		// This should catch all shitty unmarshalling
		if err != nil {
			http.Error(w, err.Error(), 410)
			return
		}
		contacts, err := h.Database.GetContacts(id.UserID)
		if err != nil {
			http.Error(w, err.Error(), 410)
			return
		}
		// Marshal the struct into JSON
		jsonData, err := json.Marshal(contacts)
		if err != nil {
			http.Error(w, "Failed to marshal JSON during GET contacts", http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		w.Write(jsonData)

	// PUT
	case http.MethodPut:
		body, err := ioutil.ReadAll(r.Body)
		if err != nil {
			http.Error(w, "Failed to read request body put", http.StatusInternalServerError)
			return
		}
		defer r.Body.Close()
		var contact Contact
		err = json.Unmarshal(body, &contact)
		// This should catch all shitty unmarshalling
		if err != nil {
			http.Error(w, err.Error(), 410)
			return
		}
		key, err := h.Database.InsertContact(contact)
		if err != nil {
			http.Error(w, err.Error(), 410)
			return
		}
		w.WriteHeader(http.StatusOK) // 200
		contactKey := Identification{
			UserID: contact.KeyID.UserID,
			Key:    key,
		}
		jsonData, err := json.Marshal(contactKey)
		if err != nil {
			http.Error(w, "Failed to marshal JSON during creating a contact", http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		w.Write(jsonData)
		break
	// DELETE
	case http.MethodDelete:
		body, err := ioutil.ReadAll(r.Body)
		if err != nil {
			http.Error(w, "Failed to read request body delete", http.StatusInternalServerError)
			return
		}
		defer r.Body.Close()
		var contact Contact
		err = json.Unmarshal(body, &contact)
		// This should catch all shitty unmarshalling
		if err != nil {
			http.Error(w, err.Error(), 410)
			return
		}
		key, err := h.Database.DeleteContact(contact)
		if err != nil {
			http.Error(w, err.Error(), 410)
			return
		}
		w.WriteHeader(http.StatusOK) // 200
		contactKey := Identification{
			UserID: contact.KeyID.UserID,
			Key:    key,
		}
		jsonData, err := json.Marshal(contactKey)
		if err != nil {
			http.Error(w, "Failed to marshal JSON during creating a contact", http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		w.Write(jsonData)

	default:
		w.WriteHeader(http.StatusConflict) // 410
		fmt.Fprint(w, "Illegal request to /login")
	}
}
